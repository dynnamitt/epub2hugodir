#!/bin/bash
export SHELL=/bin/bash # parallel need this

set -e

#  uncomment below to trace 
#  set -x

# -------------------------------
# CONSTS
# -------------------------------
EP_CONT=META-INF/container.xml
HUGO_CONF=config.toml

DEF_XPATH_DRAFT=
DEF_CONTENT_DIRNAME=_content
DEF_PUBLIC_DIRNAME=_public

TOOL_DIR=$(dirname $0)
export TOOL_DIR


# ------------------------
# func: help then exit
#
#  usage "error-text"
# ------------------------
usage() {
  echo >&2 "FAILED: $1"
  echo >&2
  echo >&2 "Usage:"
  echo >&2 "  $0 [flags] epubfile [destdir]"
  echo >&2
  echo >&2 "  epubfile can be either epub-file OR extracted directory"
  echo >&2 "  destdir default is basedir/root of epubfile"
  echo >&2
  echo >&2 "Flags:"
  echo >&2"  -d string     Xpath marking content chunk as draft. Default empty"
  echo >&2 "  -c string     Contentdir name. Default is '_content'"
  exit 1

}

# --------------------------------
# func: exit unless command found
#  
#  have_cmd cmd
# --------------------------------
have_cmd(){
  command -v $1 >/dev/null 2>&1 || {
    echo >&2
    echo >&2 " - I require [$1] but it's not installed."
    echo >&2 "   Aborting."
    exit 1; }
}

# ------------------------------
# func: exit unless path found
#
#  exist_or_die filepath
# ------------------------------
exist_or_die(){
  stat "$1" >/dev/null 2>&1 || {
    echo >&2 "File not found; '$1'"
    exit 1; } 
}

# ----------------------------------
# func: print warning unless path found
#
#  path_chk_warn filepath
# ----------------------------------
path_chk_warn(){
  stat "$1" >/dev/null 2>&1 || {
    echo >&2 "- Warning , path not found; '$1'"; }
}


#   X S L T    funcs
#  -------------------------->

# rootfile_path <CONTAINER_XML_DOC>
# output text
rootfile_path(){
    xsltproc "$TOOL_DIR/xsl/ctrl_hrefs.xsl" "$1"
}

# ncx_href <OPF_DOC>
# output text
ncx_href(){
  xsltproc --stringparam Q NCX "$TOOL_DIR/xsl/ctrl_hrefs.xsl" "$1"
}

# nav_href <OPF_DOC>
# output text
nav_href(){
  xsltproc --stringparam Q NAV "$TOOL_DIR/xsl/ctrl_hrefs.xsl" "$1"
}

# xh_hrefs <OPF_DOC>
# output text records
xh_hrefs(){
  xsltproc --stringparam Q XHTMLS "$TOOL_DIR/xsl/ctrl_hrefs.xsl" "$1"
}

# xh_cleanup <XH_DOC>
# output xml doc
xh_cleanup(){
  xsltproc --novalid "$TOOL_DIR/xsl/xh_cleanup.xsl" "$1"
}
export -f xh_cleanup

# xh_body_content <XH_DOC>
# output xml fragments
xh_body_content(){
  xsltproc --novalid "$TOOL_DIR/xsl/xh_body_content.xsl" "$1"
}
export -f xh_body_content

# head_meta_toml <XH_DOC>
# output toml
head_meta_toml(){
  xsltproc --novalid "$TOOL_DIR/xsl/xh_head.xsl" "$1" \
    | xsltproc --novalid "$TOOL_DIR/xsl/head2toml.xsl" -
}
export -f head_meta_toml

# =============================================
#                         _       
#         _ __ ___   __ _(_)_ __  
#        | '_ ` _ \ / _` | | '_ \ 
#        | | | | | | (_| | | | | |
#        |_| |_| |_|\__,_|_|_| |_|
# 

# -----------------------------
# collect args if any
# -----------------------------

# ---------------------
# args, Input+Output
# ---------------------
EPUB=$1
test -z "$EPUB" && usage "epubfile empty"

HUGO_DIR=${2:-$(dirname "$EPUB")}
# test -z "$HUGO_DIR" && usage "destdir empty"

CONTENT_DIRNAME=${DEF_CONTENT_DIRNAME}

# ---------------------------
# is DEST = SRC ? just warn
# ---------------------------
ep_dir=$(readlink -f $(dirname $EPUB))
if test "$ep_dir" = $(readlink -f "$HUGO_DIR")
then 
  echo >&2 "! NB, destdir same as EPUB location"
fi


# ----------------------
# commands validation
# ----------------------
printf "* Checking availiable COMMANDs in system..."
have_cmd getopts
have_cmd grep
have_cmd stat
have_cmd readlink
have_cmd xsltproc
have_cmd parallel
echo "ok"

# -----------------------------------
# Check input variant (file or dir)
# -----------------------------------
if test -d "$EPUB"; then
  printf "* Epubfile is assumed to be extracted-dir..."
  exist_or_die "$EPUB/$EP_CONT"
  echo "ok"
  EPUB_SRC=$EPUB
else
  echo "* Epubfile will be unzipped."
  exist_or_die "$EPUB"
  have_cmd unzip
  printf "* Unzipping to"
  _tmp_dir_unzip=$(mktemp --directory /tmp/epub_dir_XXXXXX)
  printf " tempdir '$_tmp_dir_unzip'..."
  unzip -q "$EPUB" -d "$_tmp_dir_unzip"
  exist_or_die "$_tmp_dir_unzip/$EP_CONT"
  echo "ok"
  EPUB_SRC=$_tmp_dir_unzip
fi


# -----------------------------------
# Move+transform content into destdir
# -----------------------------------
path_chk_warn $HUGO_DIR

CONTENT_DIR=$HUGO_DIR/$CONTENT_DIRNAME
mkdir -p $CONTENT_DIR

EP_OPF_PATH=$(rootfile_path "$EPUB_SRC/$EP_CONT")
EP_ROOT_DIR=$(dirname "$EP_OPF_PATH")
echo "* Packagefile rel path is '$EP_OPF_PATH'"

# -------------------------------
#  locate TOC xml-doc(s)
# -------------------------------
EP_NCX_HREF=$(ncx_href "$EPUB_SRC/$EP_OPF_PATH")

if test -z "$EP_NCX_HREF"; then
  printf "! NCX not found, searching for xhtml-toc..."
  EP_XHTOC_HREF=$(xsl _toc_href "$EPUB_SRC/$EP_OPF_PATH")
  if test -z "$EP_XHTOC_HREF"; then
    echo "NOT FOUND, aborting!"
    exit 1
  else
    EP_XHTOC_PATH=$EP_ROOT_DIR/$EP_XHTOC_HREF
    echo " '$EP_XHTOC_PATH'"
    echo "- making NCX..."
    echo "    NOT IMPL!"
    exit 1
  fi
else
  EP_NCX_PATH=$EP_ROOT_DIR/$EP_NCX_HREF
  echo "* NCX rel path is '$EP_NCX_PATH'"
fi

# config.toml
printf "* Writing '$HUGO_DIR/$HUGO_CONF'..."
cat << _EOF > "$HUGO_DIR/$HUGO_CONF"
contentdir = "$CONTENT_DIRNAME"
_EOF
echo "ok"

# ------------------
# func: frontmatter
# ------------------
frontmatter(){
  echo "+++"
  head_meta_toml "$1"
  # TODO fetch also from TOC/NCX
  # TODO bc, prev, next
  echo
  echo "+++"
}
export -f frontmatter

# -----------------------------------------
# func: pipeline for each content dest
# -----------------------------------------
export _src=$EPUB_SRC/$EP_ROOT_DIR
export _dest=$HUGO_DIR/$CONTENT_DIRNAME
xhtml_pipe(){
  printf " >∙>∙ '$1' ..."
  xh_cleanup "$_src/$1" \
    | (frontmatter "$_src/$1" ; xh_body_content - ) \
    > "$_dest/$1"
  echo ok
}
export -f xhtml_pipe # bashism !!

echo "* Concurrent mapping of content file(s)..."
xh_hrefs "$EPUB_SRC/$EP_OPF_PATH" \
  | parallel xhtml_pipe {}
