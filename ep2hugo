#!/bin/sh

# -------------------------------
# CONSTS
# -------------------------------
EP_CONT=META-INF/container.xml
HUGO_CONF=config.toml

DEF_XPATH_DRAFT=
DEF_CONTENT_DIRNAME=_content


# ------------------------
# func: help then exit
#
#  usage "error-text"
# ------------------------
usage() {
  echo
  echo Usage:
  echo "  $0 [flags] epubfile [destdir]"
  echo
  echo "  epubfile can be either epub-file OR extracted directory"
  echo "  destdir default is basedir/root of epubfile"
  echo
  echo Flags:
  echo "  -d string     Xpath marking content chunk as draft. Default empty"
  echo "  -c string     Contentdir name. Default is '_content'"
  echo "  -r path       Custom xslt script generating the name-map.xml"

  echo
  echo "!! Error: '$1'"
  exit 1

}

# --------------------------------
# func: exit unless command found
#  
#  have_cmd cmd
# --------------------------------
have_cmd(){
  command -v $1 >/dev/null 2>&1 || {
    echo >&2
    echo >&2 " - I require [$1] but it's not installed."
    echo >&2 "   Aborting."
    exit 1; }
}

# ------------------------------
# func: exit unless path found
#
#  exist_or_die filepath
# ------------------------------
exist_or_die(){
  stat "$1" >/dev/null 2>&1 || {
    echo >&2 "File not found; '$1'"
    exit 1; } 
}

# ----------------------------------
# func: print warning unless path found
#
#  path_chk_warn filepath
# ----------------------------------
path_chk_warn(){
  stat "$1" >/dev/null 2>&1 || {
    echo >&2 "- Warning , path not found; '$1'"; }
}

# ------------------------------------------------
# func: wrap args in xslt-doc
#
#  xsl_doc method "xslt-expr" "xslt-expr2" "xslt-expr3" 
# ------------------------------------------------
xsl_doc(){
  _method=$1
  if test "$_method" = "text"; then
    _omit_decl=yes
  else
    _omit_decl=no
  fi
  shift
  cat << _EOF
<xsl:stylesheet version="1.0" 
 xmlns:cont="urn:oasis:names:tc:opendocument:xmlns:container"
 xmlns:ncx="http://www.daisy.org/z3986/2005/ncx/"
 xmlns:opf="http://www.idpf.org/2007/opf"
 xmlns:strings="http://exslt.org/strings"
 xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
 exclude-result-prefixes="ncx strings cont opf">
 <xsl:output method="$_method" encoding="utf-8" 
    omit-xml-declaration="$_omit_decl"/>
$@
</xsl:stylesheet>
_EOF
}

# ----------------------------------
# func: helper xslt grunt
#
# xslt local-xslt-func input-xml
# ----------------------------------
xsl(){
  _xsl_tmp=$(mktemp /tmp/ep2hugo_XXXXXX.xsl)
  $1 > "$_xsl_tmp"
  xsltproc "$_xsl_tmp" "$2"
}


EP_OPF_PATH="$(xsltproc "$_xsl_tmp" "$EPUB_SRC/$EP_CONT")" 

# -------------------------------------------------------
# func: wrap args in xslt:templ-tag
#
#  xslt_templ "match-expr" "xslt-expr1" "xslt-expr2" .. 
# -------------------------------------------------------
xsl_templ(){
  _MATCH=$1
  shift
  _EXPRS=$@
  printf "<xsl:template match=\"${_MATCH}\">"
  printf "${_EXPRS}</xsl:template>"
}

# -------------------------------------------------
# func: xslt that find epub-package path
#
#  inputdoc == oasis/container
#
#  _rootfile_path 
# -------------------------------------------------
_rootfile_path(){
  # first template is GRUNT to avoid 2 newlines
  xsl_doc text $(xsl_templ "/cont:container" \
    "<xsl:apply-templates select=\"//cont:rootfile\" />") \
    $(xsl_templ "//cont:rootfile[@media-type='application/oebps-package+xml']" \
    "<xsl:value-of select=\"@full-path\"/>" )
}

# ---------------------------------------------
# func: xslt that find ncx href (if in OPF)
#
#   inputdoc = 'package' aka 'opf' aka 'rootfile'
#
#   _ncx_path
# -------------------------------------------------
_ncx_path(){
  # first template is GRUNT to avoid 2 newlines
  xsl_doc text $(xsl_templ "/" \
    "<xsl:apply-templates select=\"//opf:item\" />") \
    $(xsl_templ "//opf:item[@media-type='application/x-dtbncx+xml']" \
    "<xsl:value-of select=\"@href\"/>" )
}

# ---------------------------------------------
# func: xslt that find ep3-xh-toc href
#
#   inputdoc = 'package' aka 'opf' aka 'rootfile'
#
#   _toc_path
# -------------------------------------------------
_toc_path(){
  # first template is GRUNT to avoid 2 newlines
  xsl_doc text $(xsl_templ "/" \
    "<xsl:apply-templates select=\"//opf:item\" />") \
    $(xsl_templ "//opf:item[@properties='nav']" \
    "<xsl:value-of select=\"@href\"/>" )
}

# --------------------------------------------------
# func: default names-map xslt, not used if -r set
#
#  inputdoc == daisy/ncx
#
#  _names_map
# --------------------------------------------------
_names_map_from_ncx(){
  xsl_doc xml $(xsl_templ "/" \
    "<contents>" \
    "  <xsl:apply-templates select=\"//ncx:content/@src\"/>" \
    "</contents>" ) \
    $(xsl_templ "//ncx:content/@src" \
    "<xsl:variable name=\"fname\">" \
    "  <xsl:value-of select=\"strings:split(.,'#')[1]\"/>" \
    "</xsl:variable>" \
    "<content>" \
    "  <src>" \
    "    <xsl:value-of select=\"\$fname\"/>" \
    "  </src>" \
    "  <dest>" \
    "    <xsl:value-of select=\"strings:replace(\$fname,'.xhtm','.htm')\"/>" \
    "  </dest>" \
    "</content>" )
 }


# =============================================
#                         _       
#         _ __ ___   __ _(_)_ __  
#        | '_ ` _ \ / _` | | '_ \ 
#        | | | | | | (_| | | | | |
#        |_| |_| |_|\__,_|_|_| |_|
# 

set -e # DIE fast 
            
# ----------------------
# commands validation
# ----------------------
printf "* Checking availiable COMMANDs in system..."
have_cmd getopts
have_cmd grep
have_cmd stat
have_cmd readlink
have_cmd xsltproc
have_cmd parallel
echo "ok"

alias realpath="readlink -f"

# -----------------------------
# collect args if any
# -----------------------------

# ---------------------
# args, Input+Output
# ---------------------
EPUB=$1
test -z "$EPUB" && usage "epubfile empty"

HUGODIR=${2:-$(dirname "$EPUB")}
test -z "$HUGODIR" && usage "destdir empty"

CONTENT_DIRNAME=${DEF_CONTENT_DIRNAME}


# ---------------------------
# is DEST = SRC ? just warn
# ---------------------------
ep_dir=$(realpath $(dirname $EPUB))
if test "$ep_dir" = $(realpath "$HUGODIR")
then 
  echo >&2 "! NB, destdir same as EPUB location"
fi

# -----------------------------------
# Check input variant (file or dir)
# -----------------------------------
if test -d "$EPUB"; then
  printf "* Epubfile is assumed to be extracted-dir..."
  exist_or_die "$EPUB/$EP_CONT"
  echo "ok"
  EPUB_SRC=$EPUB
else
  echo "* Epubfile will be unzipped."
  exist_or_die "$EPUB"
  have_cmd unzip
  printf "* Unzipping to"
  _tmp_dir_unzip=$(mktemp --directory /tmp/epub_dir_XXXXXX)
  printf " tempdir '$_tmp_dir_unzip'..."
  unzip -q "$EPUB" -d "$_tmp_dir_unzip"
  exist_or_die "$_tmp_dir_unzip/$EP_CONT"
  echo "ok"
  EPUB_SRC=$_tmp_dir_unzip
fi


# -----------------------------------
# Move+transform content into destdir
# -----------------------------------
path_chk_warn $HUGODIR

CONTENT_DIR=$HUGODIR/$CONTENT_DIRNAME
mkdir -p $CONTENT_DIR

EP_OPF_PATH=$(xsl _rootfile_path "$EPUB_SRC/$EP_CONT")
echo "* Packagefile rel path is '$EP_OPF_PATH'"

EP_NCX_PATH=$(xsl _ncx_path "$EPUB_SRC/$EP_OPF_PATH")

if test -z "$EP_NCX_PATH"; then
  printf "! NCX not found, searching for xhtml-toc..."
  EP_XHTOC_PATH=$(xsl _toc_path "$EPUB_SRC/$EP_OPF_PATH")
  if test -z "$EP_XHTOC_PATH"; then
    echo "NOT FOUND, aborting!"
    exit 1
  else
    echo " '$EP_XHTOC_PATH'"
  fi
else
  echo "* NCX rel path is '$EP_OPF_PATH'"
fi

# # config.toml
printf "* Writing '$HUGODIR/$HUGO_CONF'..."
cat << _EOF > "$HUGODIR/$HUGO_CONF"
contentdir = "$(dirname $EP_OPF_PATH)/$CONTENT_DIRNAME"
_EOF
echo "ok"

echo "--------ENDE of sequencial code"

for f in "$EPUB_SRC"/*
do
  _f=$(echo $f| tr ' ' '+')
  printf "* Copying $(basename $f) to $(basename $_f)..."
  echo ok
done
echo "ok"
